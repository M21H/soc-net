{"version":3,"sources":["pages/Login/Login.tsx","common/FormsControls/FormsControls.tsx","common/FormsControls/FormsControls.module.css","utils/validators/validators.ts","pages/Login/Login.module.css"],"names":["LoginReduxForm","reduxForm","form","handleSubmit","error","captchaUrl","className","styled","formControl","onSubmit","createField","required","Input","type","style","display","justifyContent","src","alt","color","alignItems","undefined","btn_login","Login","dispatch","useDispatch","useSelector","auth","isAuth","to","RouteName","PROFILE_ROUTE","formData","login","email","password","rememberMe","captcha","FormControl","meta","touched","children","hasError","styles","title__error","Textarea","props","input","restProps","placeholder","name","validators","component","text","field","autoComplete","validate","module","exports","value","maxLength","max","length"],"mappings":"0GAAA,mGAiEMA,EAAiBC,YAAqD,CAAEC,KAAM,SAA7DD,EA9B2F,SAAC,GAI5G,IAHNE,EAGK,EAHLA,aACAC,EAEK,EAFLA,MACAC,EACK,EADLA,WAEA,OACC,sBAAMC,UAAWC,IAAOC,YAAaC,SAAUN,EAA/C,SACC,gCACEO,YAAoC,QAAS,QAAS,CAACC,KAAWC,KAClEF,YAAoC,WAAY,WAAY,CAACC,KAAWC,IAAO,CAC/EC,KAAM,aAGNR,GAAcK,YAAoC,2BAA4B,UAAW,CAACC,KAAWC,KACrGP,GACA,qBAAKS,MAAO,CAAEC,QAAS,OAAQC,eAAgB,UAA/C,SACC,qBAAKC,IAAKZ,EAAYa,IAAI,cAG3Bd,GAAS,qBAAKU,MAAO,CAAEK,MAAO,OAArB,SAA+Bf,IAEzC,qBAAKU,MAAO,CAAEC,QAAS,OAAQC,eAAgB,YAAaI,WAAY,UAAxE,SACEV,iBAAoCW,EAAW,aAAc,GAAIT,IAAO,CAAEC,KAAM,YAAc,iBAEhG,wBAAQP,UAAWC,IAAOe,UAA1B,2BAQWC,UA9CS,WACvB,IAAMC,EAAWC,cADY,EAEEC,aAAY,qBAAGC,QAAtCC,EAFqB,EAErBA,OAAQvB,EAFa,EAEbA,WAKhB,OAAOuB,EAAS,cAAC,IAAD,CAAUC,GAAIC,IAAUC,gBAAoB,cAAC/B,EAAD,CAAgBS,SAH3D,SAACuB,GACjBR,EAASS,YAAMD,EAASE,MAAOF,EAASG,SAAUH,EAASI,WAAYJ,EAASK,WAEehC,WAAYA,M,oMCnBvGiC,EAA8C,SAAC,GAA4C,IAAD,IAAzCC,KAAQC,EAAiC,EAAjCA,QAASpC,EAAwB,EAAxBA,MAASqC,EAAe,EAAfA,SAC1EC,EAAWF,GAAWpC,EAC5B,OACC,qCACC,qBAAKE,UAAWoC,EAAWC,IAAOvC,MAAQ,GAA1C,SAA+CqC,IAC9CC,GAAY,sBAAMpC,UAAWqC,IAAOC,aAAxB,SAAuCxC,QAK1CyC,EAAwC,SAAAC,GAAS,IAErDC,EAA8BD,EAA9BC,MAAgBC,GAAcF,EAAvBP,KAF8C,YAEvBO,EAFuB,mBAG7D,OACC,cAACR,EAAD,2BAAiBQ,GAAjB,aACC,oDAAcC,GAAWC,QAKfpC,EAAqC,SAAAkC,GAAS,IAElDC,EAA8BD,EAA9BC,MAAgBC,GAAcF,EAAvBP,KAF2C,YAEpBO,EAFoB,mBAG1D,OACC,cAACR,EAAD,2BAAiBQ,GAAjB,aACC,iDAAWC,GAAWC,QAKlB,SAAStC,EACfuC,EACAC,EACAC,EACAC,GAGE,IAFFN,EAEC,uDAFO,GACRO,EACC,uDADM,GAEP,OACC,qCACC,cAAC,IAAD,aACC/C,UAAWqC,IAAOW,MAClBzC,KAAK,OACL0C,aAAa,KACbL,KAAMA,EACND,YAAaA,EACbG,UAAWA,EACXI,SAAUL,GACNL,IAEJO,O,oBC1DJI,EAAOC,QAAU,CAAC,MAAQ,6BAA6B,aAAe,oCAAoC,MAAQ,+B,iCCClH,oEAAO,IAAM/C,EAA+B,SAAAgD,GAC3C,IAAIA,EACJ,MAAO,qBAGKC,EACZ,SAACC,GAAD,OACA,SAAAF,GAAK,OACJA,EAAMG,OAASD,EAAf,qBAAmCA,EAAnC,iBAAmDxC,K,oBCTrDoC,EAAOC,QAAU,CAAC,YAAc,2BAA2B,UAAY","file":"static/js/7.0a569009.chunk.js","sourcesContent":["import React from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { Redirect } from 'react-router'\nimport { InjectedFormProps, reduxForm } from 'redux-form'\nimport { login } from '../../redux/auth_reducer'\nimport styled from './Login.module.css'\nimport { createField, Input } from '../../common/FormsControls/FormsControls'\nimport { AppStateType } from '../../redux/store'\nimport { required } from '../../utils/validators/validators'\nimport { RouteName } from '../../routes/routes'\n\ntype LoginFormValueType = {\n\temail: string\n\tpassword: string\n\trememberMe: boolean\n\tcaptcha: string\n}\n\ntype LoginFormValueTypeKeys = Extract<keyof LoginFormValueType, string> // 'email' | 'password' | 'rememberMe' | 'captcha'\n// type LoginFormValueTypeKeys = keyof LoginFormValueType\n\nconst Login: React.FC = () => {\n\tconst dispatch = useDispatch()\n\tconst { isAuth, captchaUrl } = useSelector(({ auth }: AppStateType) => auth)\n\n\tconst onSubmit = (formData: LoginFormValueType) => {\n\t\tdispatch(login(formData.email, formData.password, formData.rememberMe, formData.captcha))\n\t}\n\treturn isAuth ? <Redirect to={RouteName.PROFILE_ROUTE} /> : <LoginReduxForm onSubmit={onSubmit} captchaUrl={captchaUrl} />\n}\n\ntype LoginFormOwnPropsType = {\n\tcaptchaUrl: string | null\n}\n\nconst LoginForm: React.FC<InjectedFormProps<LoginFormValueType, LoginFormOwnPropsType> & LoginFormOwnPropsType> = ({\n\thandleSubmit,\n\terror,\n\tcaptchaUrl,\n}) => {\n\treturn (\n\t\t<form className={styled.formControl} onSubmit={handleSubmit}>\n\t\t\t<div>\n\t\t\t\t{createField<LoginFormValueTypeKeys>('Email', 'email', [required], Input)}\n\t\t\t\t{createField<LoginFormValueTypeKeys>('Password', 'password', [required], Input, {\n\t\t\t\t\ttype: 'password',\n\t\t\t\t})}\n\n\t\t\t\t{captchaUrl && createField<LoginFormValueTypeKeys>('Enter symbols from image', 'captcha', [required], Input)}\n\t\t\t\t{captchaUrl && (\n\t\t\t\t\t<div style={{ display: 'flex', justifyContent: 'center' }}>\n\t\t\t\t\t\t<img src={captchaUrl} alt='captcha' />\n\t\t\t\t\t</div>\n\t\t\t\t)}\n\t\t\t\t{error && <div style={{ color: 'red' }}>{error}</div>}\n\n\t\t\t\t<div style={{ display: 'flex', justifyContent: 'flexStart', alignItems: 'center' }}>\n\t\t\t\t\t{createField<LoginFormValueTypeKeys>(undefined, 'rememberMe', [], Input, { type: 'checkbox' }, 'remember me')}\n\t\t\t\t</div>\n\t\t\t\t<button className={styled.btn_login}>Login</button>\n\t\t\t</div>\n\t\t</form>\n\t)\n}\n\nconst LoginReduxForm = reduxForm<LoginFormValueType, LoginFormOwnPropsType>({ form: 'login' })(LoginForm)\n\nexport default Login\n","import React from 'react'\nimport { Field, WrappedFieldMetaProps, WrappedFieldProps } from 'redux-form'\nimport { FieldValidatorType } from '../../utils/validators/validators'\nimport styles from './FormsControls.module.css'\n\ntype FormControlPropsType = {\n\tmeta: WrappedFieldMetaProps\n}\n\nconst FormControl: React.FC<FormControlPropsType> = ({ meta: { touched, error }, children }) => {\n\tconst hasError = touched && error\n\treturn (\n\t\t<>\n\t\t\t<div className={hasError ? styles.error : ''}>{children}</div>\n\t\t\t{hasError && <span className={styles.title__error}>{error}</span>}\n\t\t</>\n\t)\n}\n\nexport const Textarea: React.FC<WrappedFieldProps> = props => {\n\t// const { input, meta, child, ...restProps } = props\n\tconst { input, meta, ...restProps } = props\n\treturn (\n\t\t<FormControl {...props}>\n\t\t\t<textarea {...input} {...restProps} />\n\t\t</FormControl>\n\t)\n}\n\nexport const Input: React.FC<WrappedFieldProps> = props => {\n\t// const { input, meta, child, ...restProps } = props\n\tconst { input, meta, ...restProps } = props\n\treturn (\n\t\t<FormControl {...props}>\n\t\t\t<input {...input} {...restProps} />\n\t\t</FormControl>\n\t)\n}\n\nexport function createField<FormKeysType extends string>(\n\tplaceholder: string | undefined,\n\tname: FormKeysType,\n\tvalidators: Array<FieldValidatorType>,\n\tcomponent: React.FC<WrappedFieldProps>,\n\tprops = {}, // can be for example type: password or checkbox\n\ttext = ''\n) {\n\treturn (\n\t\t<>\n\t\t\t<Field\n\t\t\t\tclassName={styles.field}\n\t\t\t\ttype='text'\n\t\t\t\tautoComplete='on'\n\t\t\t\tname={name}\n\t\t\t\tplaceholder={placeholder}\n\t\t\t\tcomponent={component}\n\t\t\t\tvalidate={validators}\n\t\t\t\t{...props}\n\t\t\t/>\n\t\t\t{text}\n\t\t</>\n\t)\n}\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"error\":\"FormsControls_error__M8dca\",\"title__error\":\"FormsControls_title__error__ptIoh\",\"field\":\"FormsControls_field__8cceV\"};","export type FieldValidatorType = (value: string) => string | undefined\n\nexport const required: FieldValidatorType = value => {\n\tif (value) return undefined\n\treturn 'Field is required'\n}\n\nexport const maxLength =\n\t(max: number): FieldValidatorType =>\n\tvalue =>\n\t\tvalue.length > max ? `Max length ${max} symbols` : undefined\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"Login_formControl__1e2LK\",\"btn_login\":\"Login_btn_login__r0kVI\"};"],"sourceRoot":""}