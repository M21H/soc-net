{"version":3,"sources":["assets/img/user.png","redux/reselectors/usersReselectors.ts","components/Users/User.tsx","common/Paginator/Paginator.tsx","components/Users/UsersSearchForm.tsx","pages/Users/Users.tsx","common/Paginator/Paginator.module.css"],"names":["getAllUsers","state","usersPage","users","getTotalUsersCount","totalUsersCount","getPageSize","pageSize","getCurrentPage","currentPage","getIsFetching","isFetching","getToggleFollowingInProgress","toggleFollowingInProgress","getUsersFilter","filter","User","id","photos","name","status","followed","togFolInProg","useSelector","dispatch","useDispatch","to","RouteName","PROFILE_ROUTE","Avatar","src","small","userImg","disabled","some","userId","onClick","unfollow","follow","Paginator","onPageChanged","portionSize","totalItemsCount","pagesCount","Math","ceil","pages","i","push","portionCount","React","useState","portionNumber","setPortionNumber","leftPortionPageNumber","rightPortionPageNumber","className","style","paginator","page","map","index","cn","selectedPage","pageNumber","usersSearchFormValidate","values","UsersSearchForm","memo","onFilterChanged","enableReinitialize","initialValues","term","friend","String","validate","onSubmit","setSubmitting","isSubmitting","type","as","value","Users","history","useHistory","useEffect","parsed","queryString","parse","location","search","substring","actualPage","actualFilter","Number","getUsers","query","pathname","stringify","Preloader","user","module","exports"],"mappings":"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","file":"static/js/9.4bfebd9e.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/user.42138946.png\";","import { AppStateType } from '../store'\n\n\nexport const getAllUsers = (state: AppStateType) => {\n\treturn state.usersPage.users\n}\n\nexport const getTotalUsersCount = (state: AppStateType) => {\n\treturn state.usersPage.totalUsersCount\n}\n\nexport const getPageSize = (state: AppStateType) => {\n\treturn state.usersPage.pageSize\n}\n\nexport const getCurrentPage = (state: AppStateType) => {\n\treturn state.usersPage.currentPage\n}\n\nexport const getIsFetching = (state: AppStateType) => {\n\treturn state.usersPage.isFetching\n}\n\nexport const getToggleFollowingInProgress = (state: AppStateType) => {\n\treturn state.usersPage.toggleFollowingInProgress\n}\n\nexport const getUsersFilter = (state: AppStateType) => {\n\treturn state.usersPage.filter\n}\n","import { Avatar } from '@material-ui/core'\nimport { NavLink } from 'react-router-dom'\nimport { useDispatch, useSelector } from 'react-redux'\nimport userImg from '../../assets/img/user.png'\nimport { follow, unfollow } from '../../redux/users_reducer'\nimport { getToggleFollowingInProgress } from '../../redux/reselectors/usersReselectors'\nimport { UserType } from '../../types/types'\nimport { RouteName } from '../../routes/routes'\n\nconst User: React.FC<UserType> = ({ id, photos, name, status, followed }) => {\n\tconst togFolInProg = useSelector(getToggleFollowingInProgress)\n\tconst dispatch = useDispatch()\n\n\tconst onFollow = () => {\n\t\tdispatch(follow(id))\n\t}\n\n\tconst onUnFollow = () => {\n\t\tdispatch(unfollow(id))\n\t}\n\n\treturn (\n\t\t<div>\n\t\t\t<NavLink to={`${RouteName.PROFILE_ROUTE}/${id}`}>\n\t\t\t\t<Avatar src={photos.small != null ? photos.small : userImg} />\n\t\t\t</NavLink>\n\n\t\t\t<div>{name}</div>\n\t\t\t<div>{status}</div>\n\t\t\t{followed ? (\n\t\t\t\t<button disabled={togFolInProg.some(userId => userId === id)} onClick={onUnFollow}>\n\t\t\t\t\tUnfollow\n\t\t\t\t</button>\n\t\t\t) : (\n\t\t\t\t<button disabled={togFolInProg.some(userId => userId === id)} onClick={onFollow}>\n\t\t\t\t\tFollow\n\t\t\t\t</button>\n\t\t\t)}\n\t\t</div>\n\t)\n}\n\nexport default User\n","import React from 'react'\nimport cn from 'classnames'\nimport { useSelector } from 'react-redux'\nimport style from './Paginator.module.css'\nimport { getTotalUsersCount } from '../../redux/reselectors/usersReselectors'\n\ntype PropsType = {\n\tpageSize: number\n\tcurrentPage: number\n\tonPageChanged: (pageNumber: number) => void\n\tportionSize?: number\n}\n\nconst Paginator: React.FC<PropsType> = ({ pageSize, currentPage, onPageChanged, portionSize = 10 }) => {\n\tconst totalItemsCount = useSelector(getTotalUsersCount)\n\n\tconst pagesCount = Math.ceil(totalItemsCount / pageSize)\n\tconst pages: Array<number> = []\n\tfor (let i = 1; i <= pagesCount; i++) {\n\t\tpages.push(i)\n\t}\n\n\tconst portionCount = Math.ceil(pagesCount / portionSize)\n\tconst [portionNumber, setPortionNumber] = React.useState(1)\n\tconst leftPortionPageNumber = (portionNumber - 1) * portionSize + 1\n\tconst rightPortionPageNumber = portionNumber * portionSize\n\n\treturn (\n\t\t<div className={style.paginator}>\n\t\t\t{portionNumber > 1 && (\n\t\t\t\t<button\n\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\tsetPortionNumber(portionNumber - 1)\n\t\t\t\t\t}}>\n\t\t\t\t\tPREV\n\t\t\t\t</button>\n\t\t\t)}\n\t\t\t{pages\n\t\t\t\t.filter(page => page >= leftPortionPageNumber && page <= rightPortionPageNumber)\n\t\t\t\t.map((page, index) => (\n\t\t\t\t\t<span\n\t\t\t\t\t\tkey={`${page}_${index}`}\n\t\t\t\t\t\tclassName={cn({ [style.selectedPage]: currentPage === page }, style.pageNumber)}\n\t\t\t\t\t\tonClick={() => onPageChanged(page)}>\n\t\t\t\t\t\t{`${page} `}\n\t\t\t\t\t</span>\n\t\t\t\t))}\n\t\t\t{portionCount > portionNumber && (\n\t\t\t\t<button\n\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\tsetPortionNumber(portionNumber + 1)\n\t\t\t\t\t}}>\n\t\t\t\t\tNEXT\n\t\t\t\t</button>\n\t\t\t)}\n\t\t</div>\n\t)\n}\n\nexport default Paginator\n","import React from 'react'\nimport { Form, Formik, Field } from 'formik'\nimport { useSelector } from 'react-redux'\nimport { FilterType } from '../../redux/users_reducer'\nimport { getUsersFilter } from '../../redux/reselectors/usersReselectors'\n\ntype FriendFormType = 'true' | 'false' | 'null'\n\ntype FormType = {\n\tterm: string\n\tfriend: FriendFormType\n}\n\ntype PropsType = {\n\tonFilterChanged: (filter: FilterType) => void\n}\n\nconst usersSearchFormValidate = (values: any) => {\n\tconst errors = {}\n\treturn errors\n}\n\nexport const UsersSearchForm: React.FC<PropsType> = React.memo(({ onFilterChanged }) => {\n\tconst filter = useSelector(getUsersFilter)\n\n\tconst submit = (values: FormType, { setSubmitting }: { setSubmitting: (isSubmitting: boolean) => void }) => {\n\t\tconst filter: FilterType = {\n\t\t\tterm: values.term,\n\t\t\tfriend: values.friend === 'null' ? null : values.friend === 'true',\n\t\t}\n\t\tonFilterChanged(filter)\n\t\tsetSubmitting(false)\n\t}\n\n\treturn (\n\t\t<div>\n\t\t\t<Formik\n\t\t\t\tenableReinitialize\n\t\t\t\tinitialValues={{ term: filter.term, friend: String(filter.friend) as FriendFormType }}\n\t\t\t\tvalidate={usersSearchFormValidate}\n\t\t\t\tonSubmit={submit}>\n\t\t\t\t{({ isSubmitting }) => (\n\t\t\t\t\t<Form>\n\t\t\t\t\t\t<Field type='text' name='term' />\n\t\t\t\t\t\t<Field name='friend' as='select'>\n\t\t\t\t\t\t\t<option value='null'>All</option>\n\t\t\t\t\t\t\t<option value='true'>Only followed</option>\n\t\t\t\t\t\t\t<option value='false'>Only unfollowed</option>\n\t\t\t\t\t\t</Field>\n\t\t\t\t\t\t<button type='submit' disabled={isSubmitting}>\n\t\t\t\t\t\t\tFind\n\t\t\t\t\t\t</button>\n\t\t\t\t\t</Form>\n\t\t\t\t)}\n\t\t\t</Formik>\n\t\t</div>\n\t)\n})\n","import React from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { useHistory } from 'react-router'\nimport queryString from 'querystring'\nimport User from '../../components/Users/User'\nimport Paginator from '../../common/Paginator/Paginator'\nimport { UsersSearchForm } from '../../components/Users/UsersSearchForm'\nimport {\n\tgetAllUsers,\n\tgetCurrentPage,\n\tgetIsFetching,\n\tgetPageSize,\n\tgetUsersFilter,\n} from '../../redux/reselectors/usersReselectors'\nimport Preloader from '../../common/Preloader/Preloader'\nimport { FilterType, getUsers } from '../../redux/users_reducer'\n\ntype PropsType = {}\ntype QueryParamsType = { term?: string; page?: string; friend?: string }\n\nconst Users: React.FC<PropsType> = () => {\n\tconst users = useSelector(getAllUsers)\n\tconst pageSize = useSelector(getPageSize)\n\tconst currentPage = useSelector(getCurrentPage)\n\tconst filter = useSelector(getUsersFilter)\n\tconst isFetching = useSelector(getIsFetching)\n\n\tconst dispatch = useDispatch()\n\tconst history = useHistory()\n\n\tReact.useEffect(() => {\n\t\tconst parsed = queryString.parse(history.location.search.substring(1)) as QueryParamsType // remove first no-needed symbol, then parsing\n\n\t\tlet actualPage = currentPage\n\t\tlet actualFilter = filter\n\n\t\tif (parsed.page) actualPage = Number(parsed.page)\n\t\tif (parsed.term) actualFilter = { ...actualFilter, term: parsed.term as string }\n\t\tif (parsed.friend)\n\t\t\tactualFilter = {\n\t\t\t\t...actualFilter,\n\t\t\t\tfriend: parsed.friend === 'null' ? null : parsed.friend === 'true',\n\t\t\t}\n\n\t\tdispatch(getUsers(actualPage, pageSize, actualFilter))\n\t}, [])\n\n\tReact.useEffect(() => {\n\t\tconst query: QueryParamsType = {}\n\n\t\tif (filter.term) query.term = filter.term\n\t\tif (filter.friend !== null) query.friend = String(filter.friend)\n\t\tif (currentPage !== 1) query.page = String(currentPage)\n\n\t\thistory.push({\n\t\t\tpathname: '/users',\n\t\t\tsearch: queryString.stringify(query),\n\t\t})\n\t}, [filter, currentPage])\n\n\tconst onPageChanged = (pageNumber: number) => {\n\t\tdispatch(getUsers(pageNumber, pageSize, filter))\n\t}\n\n\tconst onFilterChanged = (filter: FilterType) => {\n\t\tdispatch(getUsers(1, pageSize, filter))\n\t}\n\n\treturn (\n\t\t<>\n\t\t\t{isFetching ? (\n\t\t\t\t<Preloader />\n\t\t\t) : (\n\t\t\t\t<div>\n\t\t\t\t\t<UsersSearchForm onFilterChanged={onFilterChanged} />\n\t\t\t\t\t<Paginator pageSize={pageSize} currentPage={currentPage} onPageChanged={onPageChanged} />\n\t\t\t\t\t{users.map(user => (\n\t\t\t\t\t\t<User key={user.id} {...user} />\n\t\t\t\t\t))}\n\t\t\t\t</div>\n\t\t\t)}\n\t\t</>\n\t)\n}\n\nexport default Users\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"paginator\":\"Paginator_paginator__3-u0z\",\"pageNumber\":\"Paginator_pageNumber__1b4Wd\",\"selectedPage\":\"Paginator_selectedPage__33A6a\"};"],"sourceRoot":""}