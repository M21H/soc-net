{"version":3,"sources":["components/Dialogs/DialogItem.tsx","components/Dialogs/MessageItem.tsx","components/Dialogs/AddMessageForm.tsx","pages/Dialogs/Dialogs.tsx","common/FormsControls/FormsControls.tsx","common/FormsControls/FormsControls.module.css","utils/validators/validators.ts","pages/Dialogs/Dialogs.module.css"],"names":["DialogItem","name","id","path","RouteName","DIALOGS_ROUTE","to","MessageItem","message","maxLength100","maxLength","reduxForm","form","handleSubmit","onSubmit","createField","required","Textarea","type","Dialogs","dispatch","useDispatch","useSelector","dialogsPage","dialogs","messages","className","style","map","dialog","value","actions","sendMessage","newMessageText","FormControl","meta","touched","error","children","hasError","styles","title__error","props","input","restProps","Input","placeholder","validators","component","text","field","autoComplete","validate","module","exports","max","length","undefined"],"mappings":"oLAmBeA,EAVyB,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,KAAMC,EAAS,EAATA,GAC1CC,EAAI,UAAMC,IAAUC,cAAhB,YAAiCH,GAE3C,OACC,8BACC,cAAC,IAAD,CAASI,GAAIH,EAAb,SAAoBF,OCJRM,EAJ0B,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QAC3C,OAAO,8BAAMA,K,mCCFRC,EAAeC,YAAU,IAmBhBC,cAAmC,CAAEC,KAAM,wBAA3CD,EAbqF,SAAC,GAE9F,IADNE,EACK,EADLA,aAEA,OACC,uBAAMC,SAAUD,EAAhB,UACEE,YAAyC,gBAAiB,iBAAkB,CAACC,IAAUP,GAAeQ,IAAU,CAChHC,KAAM,aAEP,gDCmBYC,UA1BC,WACf,IAAMC,EAAWC,cADI,EAESC,aAAY,qBAAGC,eAArCC,EAFa,EAEbA,QAASC,EAFI,EAEJA,SAMjB,OACC,sBAAKC,UAAWC,IAAMH,QAAtB,UACC,8BACEA,EAAQI,KAAI,SAAAC,GAAM,OAClB,cAAC,EAAD,eAAgCA,GAAfA,EAAO3B,SAI1B,gCACEuB,EAASG,KAAI,SAAApB,GAAO,OACpB,cAAC,EAAD,eAAkCA,GAAhBA,EAAQN,OAE3B,cAAC,EAAD,CAAgBY,SAhBG,SAACgB,GACtBV,EAASW,IAAQC,YAAYF,EAAMG,4B,oMCR/BC,EAA8C,SAAC,GAA4C,IAAD,IAAzCC,KAAQC,EAAiC,EAAjCA,QAASC,EAAwB,EAAxBA,MAASC,EAAe,EAAfA,SAC1EC,EAAWH,GAAWC,EAC5B,OACC,qCACC,qBAAKX,UAAWa,EAAWC,IAAOH,MAAQ,GAA1C,SAA+CC,IAC9CC,GAAY,sBAAMb,UAAWc,IAAOC,aAAxB,SAAuCJ,QAK1CpB,EAAwC,SAAAyB,GAAS,IAErDC,EAA8BD,EAA9BC,MAAgBC,GAAcF,EAAvBP,KAF8C,YAEvBO,EAFuB,mBAG7D,OACC,cAACR,EAAD,2BAAiBQ,GAAjB,aACC,oDAAcC,GAAWC,QAKfC,EAAqC,SAAAH,GAAS,IAElDC,EAA8BD,EAA9BC,MAAgBC,GAAcF,EAAvBP,KAF2C,YAEpBO,EAFoB,mBAG1D,OACC,cAACR,EAAD,2BAAiBQ,GAAjB,aACC,iDAAWC,GAAWC,QAKlB,SAAS7B,EACf+B,EACA7C,EACA8C,EACAC,GAGE,IAFFN,EAEC,uDAFO,GACRO,EACC,uDADM,GAEP,OACC,qCACC,cAAC,IAAD,aACCvB,UAAWc,IAAOU,MAClBhC,KAAK,OACLiC,aAAa,KACblD,KAAMA,EACN6C,YAAaA,EACbE,UAAWA,EACXI,SAAUL,GACNL,IAEJO,O,oBC1DJI,EAAOC,QAAU,CAAC,MAAQ,6BAA6B,aAAe,oCAAoC,MAAQ,+B,iCCClH,oEAAO,IAAMtC,EAA+B,SAAAc,GAC3C,IAAIA,EACJ,MAAO,qBAGKpB,EACZ,SAAC6C,GAAD,OACA,SAAAzB,GAAK,OACJA,EAAM0B,OAASD,EAAf,qBAAmCA,EAAnC,iBAAmDE,K,oBCTrDJ,EAAOC,QAAU,CAAC,QAAU","file":"static/js/6.457623b9.chunk.js","sourcesContent":["import React from 'react'\nimport { NavLink } from 'react-router-dom'\nimport { RouteName } from '../../routes/routes'\n\ntype PropsType = {\n\tname: string\n\tid: number\n}\n\nconst DialogItem: React.FC<PropsType> = ({ name, id }) => {\n\tconst path = `${RouteName.DIALOGS_ROUTE}/${id}`\n\n\treturn (\n\t\t<div>\n\t\t\t<NavLink to={path}>{name}</NavLink>\n\t\t</div>\n\t)\n}\n\nexport default DialogItem\n","import React from 'react'\n\ntype PropsType = {\n\tmessage: string\n}\n\nconst MessageItem: React.FC<PropsType> = ({ message }) => {\n\treturn <div>{message}</div>\n}\n\nexport default MessageItem\n","import { InjectedFormProps, reduxForm } from 'redux-form'\nimport { createField, Textarea } from '../../common/FormsControls/FormsControls'\nimport { maxLength, required } from '../../utils/validators/validators'\nimport { NewMessageFormValueType } from '../../pages/Dialogs/Dialogs'\n\nconst maxLength100 = maxLength(50)\n\ntype NewMessageFormValueKeysType = Extract<keyof NewMessageFormValueType, string>\n\ntype PropsType = {}\n\nconst AddMessageForm: React.FC<InjectedFormProps<NewMessageFormValueType, PropsType> & PropsType> = ({\n\thandleSubmit,\n}) => {\n\treturn (\n\t\t<form onSubmit={handleSubmit}>\n\t\t\t{createField<NewMessageFormValueKeysType>('Write message', 'newMessageText', [required, maxLength100], Textarea, {\n\t\t\t\ttype: 'password',\n\t\t\t})}\n\t\t\t<button>Send</button>\n\t\t</form>\n\t)\n}\n\nexport default reduxForm<NewMessageFormValueType>({ form: 'dialogAddMessageForm' })(AddMessageForm)\n","import { useDispatch, useSelector } from 'react-redux'\nimport style from './Dialogs.module.css'\nimport DialogItem from '../../components/Dialogs/DialogItem'\nimport MessageItem from '../../components/Dialogs/MessageItem'\nimport { actions } from '../../redux/dialogs_reducer'\nimport { AppStateType } from '../../redux/store'\nimport AddMessageForm from '../../components/Dialogs/AddMessageForm'\n\nexport type NewMessageFormValueType = {\n\tnewMessageText: string\n}\n\nconst Dialogs = () => {\n\tconst dispatch = useDispatch()\n\tconst { dialogs, messages } = useSelector(({ dialogsPage }: AppStateType) => dialogsPage)\n\n\tconst onSendMessage = (value: NewMessageFormValueType) => {\n\t\tdispatch(actions.sendMessage(value.newMessageText))\n\t}\n\n\treturn (\n\t\t<div className={style.dialogs}>\n\t\t\t<div>\n\t\t\t\t{dialogs.map(dialog => (\n\t\t\t\t\t<DialogItem key={dialog.id} {...dialog} />\n\t\t\t\t))}\n\t\t\t</div>\n\n\t\t\t<div>\n\t\t\t\t{messages.map(message => (\n\t\t\t\t\t<MessageItem key={message.id} {...message} />\n\t\t\t\t))}\n\t\t\t\t<AddMessageForm onSubmit={onSendMessage} />\n\t\t\t</div>\n\t\t</div>\n\t)\n}\n\nexport default Dialogs\n","import React from 'react'\nimport { Field, WrappedFieldMetaProps, WrappedFieldProps } from 'redux-form'\nimport { FieldValidatorType } from '../../utils/validators/validators'\nimport styles from './FormsControls.module.css'\n\ntype FormControlPropsType = {\n\tmeta: WrappedFieldMetaProps\n}\n\nconst FormControl: React.FC<FormControlPropsType> = ({ meta: { touched, error }, children }) => {\n\tconst hasError = touched && error\n\treturn (\n\t\t<>\n\t\t\t<div className={hasError ? styles.error : ''}>{children}</div>\n\t\t\t{hasError && <span className={styles.title__error}>{error}</span>}\n\t\t</>\n\t)\n}\n\nexport const Textarea: React.FC<WrappedFieldProps> = props => {\n\t// const { input, meta, child, ...restProps } = props\n\tconst { input, meta, ...restProps } = props\n\treturn (\n\t\t<FormControl {...props}>\n\t\t\t<textarea {...input} {...restProps} />\n\t\t</FormControl>\n\t)\n}\n\nexport const Input: React.FC<WrappedFieldProps> = props => {\n\t// const { input, meta, child, ...restProps } = props\n\tconst { input, meta, ...restProps } = props\n\treturn (\n\t\t<FormControl {...props}>\n\t\t\t<input {...input} {...restProps} />\n\t\t</FormControl>\n\t)\n}\n\nexport function createField<FormKeysType extends string>(\n\tplaceholder: string | undefined,\n\tname: FormKeysType,\n\tvalidators: Array<FieldValidatorType>,\n\tcomponent: React.FC<WrappedFieldProps>,\n\tprops = {}, // can be for example type: password or checkbox\n\ttext = ''\n) {\n\treturn (\n\t\t<>\n\t\t\t<Field\n\t\t\t\tclassName={styles.field}\n\t\t\t\ttype='text'\n\t\t\t\tautoComplete='on'\n\t\t\t\tname={name}\n\t\t\t\tplaceholder={placeholder}\n\t\t\t\tcomponent={component}\n\t\t\t\tvalidate={validators}\n\t\t\t\t{...props}\n\t\t\t/>\n\t\t\t{text}\n\t\t</>\n\t)\n}\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"error\":\"FormsControls_error__M8dca\",\"title__error\":\"FormsControls_title__error__ptIoh\",\"field\":\"FormsControls_field__8cceV\"};","export type FieldValidatorType = (value: string) => string | undefined\n\nexport const required: FieldValidatorType = value => {\n\tif (value) return undefined\n\treturn 'Field is required'\n}\n\nexport const maxLength =\n\t(max: number): FieldValidatorType =>\n\tvalue =>\n\t\tvalue.length > max ? `Max length ${max} symbols` : undefined\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__32wgu\"};"],"sourceRoot":""}