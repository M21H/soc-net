{"version":3,"sources":["components/Chat/Message.tsx","components/Chat/MessageForm.tsx","components/Chat/Messages.tsx","pages/Chat/Chat.tsx","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableRest.js","../node_modules/@material-ui/core/esm/internal/svg-icons/Person.js","../node_modules/@material-ui/core/esm/Avatar/Avatar.js"],"names":["Message","message","Avatar","src","photo","userName","MessageForm","dispatch","useDispatch","React","useState","messageValue","setMessageValue","onChange","e","target","value","onClick","trim","alert","sendMessage","disabled","Messages","messages","useSelector","chat","map","index","Chat","useEffect","startMessagesListening","stopMessagesListening","_slicedToArray","arr","i","Array","isArray","Symbol","iterator","Object","_arr","_n","_d","_e","undefined","_s","_i","next","done","push","length","err","unsupportedIterableToArray","TypeError","createSvgIcon","d","props","ref","alt","childrenProp","children","classes","className","_props$component","component","Component","imgProps","sizes","srcSet","_props$variant","variant","other","_objectWithoutProperties","loaded","_ref","_React$useState","setLoaded","active","image","Image","onload","onerror","useLoaded","hasImg","hasImgNotFailing","_extends","img","Person","fallback","clsx","root","system","colorDefault","withStyles","theme","position","display","alignItems","justifyContent","flexShrink","width","height","fontFamily","typography","fontSize","pxToRem","lineHeight","borderRadius","overflow","userSelect","color","palette","background","default","backgroundColor","type","grey","circle","circular","rounded","shape","square","textAlign","objectFit","textIndent","name"],"mappings":"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","file":"static/js/8.eabdde8a.chunk.js","sourcesContent":["import { Avatar } from '@material-ui/core'\nimport React from 'react'\nimport { ChatMessageType } from '../../api/chatAPI'\n\nconst Message: React.FC<{ message: ChatMessageType }> = ({ message }) => {\n  return (\n    <div>\n      <div>\n        <Avatar src={message.photo} />\n        <i>{message.userName}</i>\n      </div>\n      <span>\n        {message.message}\n      </span>\n      <hr />\n    </div>\n  )\n}\n\nexport default Message","import React from 'react'\nimport { useDispatch } from 'react-redux'\nimport { sendMessage } from '../../redux/chat_reducer'\n\nconst READY = 'READY'\nconst PENDING = 'PENDING'\n\nconst MessageForm: React.FC<{}> = () => {\n  const dispatch = useDispatch()\n  const [messageValue, setMessageValue] = React.useState('')\n  const [status, setStatus] = React.useState<typeof PENDING | typeof READY>(PENDING)\n\n  const sendMessageHandler = () => {\n    if (!messageValue.trim()) {\n      return alert('write message')\n    } else {\n      dispatch(sendMessage(messageValue.trim()))\n      setMessageValue('')\n    }\n  }\n\n  return (\n    <div>\n      <textarea onChange={e => setMessageValue(e.target.value)} value={messageValue} />\n      <button onClick={sendMessageHandler} disabled={false}>send</button>\n    </div>\n  )\n}\n\nexport default MessageForm","import React from 'react'\nimport { useSelector } from 'react-redux'\nimport { Message } from '.'\nimport { AppStateType } from '../../redux/store'\n\nconst Messages: React.FC<{}> = () => {\n  const { messages } = useSelector(({ chat }: AppStateType) => chat)\n  return (\n    <>\n      {messages.map((message, index) => <Message key={index} message={message} />)}\n    </>\n  )\n}\n\nexport default Messages","import React from 'react'\nimport { useDispatch } from 'react-redux'\nimport { MessageForm, Messages } from '../../components/Chat'\nimport { startMessagesListening, stopMessagesListening } from '../../redux/chat_reducer'\n\nconst Chat: React.FC = () => {\n\n  const dispatch = useDispatch()\n\n  React.useEffect(() => {\n    dispatch(startMessagesListening())\n    return () => {\n      dispatch(stopMessagesListening())\n    }\n  }, [])\n\n  return (\n    <div>\n      <MessageForm />\n      <Messages />\n    </div>\n  )\n}\n\nexport default Chat\n","import arrayWithHoles from \"@babel/runtime/helpers/esm/arrayWithHoles\";\nimport iterableToArrayLimit from \"@babel/runtime/helpers/esm/iterableToArrayLimit\";\nimport unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nimport nonIterableRest from \"@babel/runtime/helpers/esm/nonIterableRest\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","import * as React from 'react';\nimport createSvgIcon from '../../utils/createSvgIcon';\n/**\n * @ignore - internal component.\n */\n\nexport default createSvgIcon( /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M12 12c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm0 2c-2.67 0-8 1.34-8 4v2h16v-2c0-2.66-5.33-4-8-4z\"\n}), 'Person');","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { chainPropTypes } from '@material-ui/utils';\nimport withStyles from '../styles/withStyles';\nimport Person from '../internal/svg-icons/Person';\nexport var styles = function styles(theme) {\n  return {\n    /* Styles applied to the root element. */\n    root: {\n      position: 'relative',\n      display: 'flex',\n      alignItems: 'center',\n      justifyContent: 'center',\n      flexShrink: 0,\n      width: 40,\n      height: 40,\n      fontFamily: theme.typography.fontFamily,\n      fontSize: theme.typography.pxToRem(20),\n      lineHeight: 1,\n      borderRadius: '50%',\n      overflow: 'hidden',\n      userSelect: 'none'\n    },\n\n    /* Styles applied to the root element if not `src` or `srcSet`. */\n    colorDefault: {\n      color: theme.palette.background.default,\n      backgroundColor: theme.palette.type === 'light' ? theme.palette.grey[400] : theme.palette.grey[600]\n    },\n\n    /* Styles applied to the root element if `variant=\"circle\"`. */\n    circle: {},\n\n    /* Styles applied to the root element if `variant=\"circular\"`. */\n    circular: {},\n\n    /* Styles applied to the root element if `variant=\"rounded\"`. */\n    rounded: {\n      borderRadius: theme.shape.borderRadius\n    },\n\n    /* Styles applied to the root element if `variant=\"square\"`. */\n    square: {\n      borderRadius: 0\n    },\n\n    /* Styles applied to the img element if either `src` or `srcSet` is defined. */\n    img: {\n      width: '100%',\n      height: '100%',\n      textAlign: 'center',\n      // Handle non-square image. The property isn't supported by IE 11.\n      objectFit: 'cover',\n      // Hide alt text.\n      color: 'transparent',\n      // Hide the image broken icon, only works on Chrome.\n      textIndent: 10000\n    },\n\n    /* Styles applied to the fallback icon */\n    fallback: {\n      width: '75%',\n      height: '75%'\n    }\n  };\n};\n\nfunction useLoaded(_ref) {\n  var src = _ref.src,\n      srcSet = _ref.srcSet;\n\n  var _React$useState = React.useState(false),\n      loaded = _React$useState[0],\n      setLoaded = _React$useState[1];\n\n  React.useEffect(function () {\n    if (!src && !srcSet) {\n      return undefined;\n    }\n\n    setLoaded(false);\n    var active = true;\n    var image = new Image();\n    image.src = src;\n    image.srcSet = srcSet;\n\n    image.onload = function () {\n      if (!active) {\n        return;\n      }\n\n      setLoaded('loaded');\n    };\n\n    image.onerror = function () {\n      if (!active) {\n        return;\n      }\n\n      setLoaded('error');\n    };\n\n    return function () {\n      active = false;\n    };\n  }, [src, srcSet]);\n  return loaded;\n}\n\nvar Avatar = /*#__PURE__*/React.forwardRef(function Avatar(props, ref) {\n  var alt = props.alt,\n      childrenProp = props.children,\n      classes = props.classes,\n      className = props.className,\n      _props$component = props.component,\n      Component = _props$component === void 0 ? 'div' : _props$component,\n      imgProps = props.imgProps,\n      sizes = props.sizes,\n      src = props.src,\n      srcSet = props.srcSet,\n      _props$variant = props.variant,\n      variant = _props$variant === void 0 ? 'circle' : _props$variant,\n      other = _objectWithoutProperties(props, [\"alt\", \"children\", \"classes\", \"className\", \"component\", \"imgProps\", \"sizes\", \"src\", \"srcSet\", \"variant\"]);\n\n  var children = null; // Use a hook instead of onError on the img element to support server-side rendering.\n\n  var loaded = useLoaded({\n    src: src,\n    srcSet: srcSet\n  });\n  var hasImg = src || srcSet;\n  var hasImgNotFailing = hasImg && loaded !== 'error';\n\n  if (hasImgNotFailing) {\n    children = /*#__PURE__*/React.createElement(\"img\", _extends({\n      alt: alt,\n      src: src,\n      srcSet: srcSet,\n      sizes: sizes,\n      className: classes.img\n    }, imgProps));\n  } else if (childrenProp != null) {\n    children = childrenProp;\n  } else if (hasImg && alt) {\n    children = alt[0];\n  } else {\n    children = /*#__PURE__*/React.createElement(Person, {\n      className: classes.fallback\n    });\n  }\n\n  return /*#__PURE__*/React.createElement(Component, _extends({\n    className: clsx(classes.root, classes.system, classes[variant], className, !hasImgNotFailing && classes.colorDefault),\n    ref: ref\n  }, other), children);\n});\nprocess.env.NODE_ENV !== \"production\" ? Avatar.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * Used in combination with `src` or `srcSet` to\n   * provide an alt attribute for the rendered `img` element.\n   */\n  alt: PropTypes.string,\n\n  /**\n   * Used to render icon or text elements inside the Avatar if `src` is not set.\n   * This can be an element, or just a string.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: chainPropTypes(PropTypes.object, function (props) {\n    var classes = props.classes;\n\n    if (classes == null) {\n      return null;\n    }\n\n    if (classes.circle != null && // 2 classnames? one from withStyles the other must be custom\n    classes.circle.split(' ').length > 1) {\n      throw new Error(\"Material-UI: The `circle` class was deprecated. Use `circular` instead.\");\n    }\n\n    return null;\n  }),\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes\n  /* @typescript-to-proptypes-ignore */\n  .elementType,\n\n  /**\n   * Attributes applied to the `img` element if the component is used to display an image.\n   * It can be used to listen for the loading error event.\n   */\n  imgProps: PropTypes.object,\n\n  /**\n   * The `sizes` attribute for the `img` element.\n   */\n  sizes: PropTypes.string,\n\n  /**\n   * The `src` attribute for the `img` element.\n   */\n  src: PropTypes.string,\n\n  /**\n   * The `srcSet` attribute for the `img` element.\n   * Use this attribute for responsive image display.\n   */\n  srcSet: PropTypes.string,\n\n  /**\n   * The shape of the avatar.\n   */\n  variant: chainPropTypes(PropTypes.oneOf(['circle', 'circular', 'rounded', 'square']), function (props) {\n    var variant = props.variant;\n\n    if (variant === 'circle') {\n      throw new Error('Material-UI: `variant=\"circle\"` was deprecated. Use `variant=\"circular\"` instead.');\n    }\n\n    return null;\n  })\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiAvatar'\n})(Avatar);"],"sourceRoot":""}